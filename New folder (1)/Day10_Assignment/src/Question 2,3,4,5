2)What is a ThreadPool, how to create a thread pool of 4 threads, and write down the
difference between the Callable and Runnable interface.?

-Java Thread pool represents a group of worker threads that are waiting for the job and reused many times.
 In the case of a thread pool, a group of fixed-size threads is created. A thread from the thread pool is pulled
 out and assigned a job by the service provider. After completion of the job, the thread is contained in the thread pool again.
 
 ExecutorService service=Executors.newFixedThreadPool(4):  The method creates a thread pool of the fixed size 4 threads.
 
 In a callable interface that basically throws a checked exception and returns some results. This is one of the major differences
 between the Runnable interface where no value is being returned. In this interface, it simply computes a result else throws an
 exception if unable to do so.
 
 When an object implementing runnable interface is used to create a thread, starting the thread causes the object run method to be 
 called in a separately executing thread. The general, contract of this run() method is that it may take any action whatsoever. 
 
 
 3)What do you mean by a Race condition, How to solve a race condition, give a proper example.?
 
 
 -A condition in which the critical section (a part of the program where shared memory is accessed) 
is concurrently executed by two or more threads. It leads to incorrect behavior of a program.
A race condition can be defined as, a condition in which two or more threads compete together to get certain shared resources.


In order to prevent the race conditions, one should ensure that only one process can access the shared data at a time. It is the
main reason why we need to synchronize the processes.

Another solution to avoid race condition is mutual exclusion. In mutual exclusion, if a thread is using a shared variable or thread, 
another thread will exclude itself from doing the same thing.

e.g;
     It can be seen from the output how threads are accessing the shared resource one at a time now. Synchronizing the access within
     the run() method made it happen.

     class Counter implements Runnable  
   {  
      private int c = 0;  
      public void increment()   
     {  
        try   
         {  
            Thread.sleep(10);  
          }   
        catch (InterruptedException e)   
         {  
            e.printStackTrace();  
         }  
         c++;  
    }  
      public void decrement()   
    {      
         c--;          
     }  
       public int getValue()   
     {  
       return c;  
      }  
     @Override  
     public void run()   
    {  
       synchronized(this)  
     {  
         // incrementing  
          this.increment();  
        System.out.println("Value for Thread After increment " + Thread.currentThread().getName() + " " + this.getValue());  
         //decrementing  
         this.decrement();  
       System.out.println("Value for Thread at last " + Thread.currentThread().getName() + " " + this.getValue());  
     }          
   }  
  }  



       public class RaceConditionDemo  
    {  
         public static void main(String args[])   
      {  
            Counter counter = new Counter();  
            Thread t1 = new Thread(counter, "Thread-1");  
            Thread t2 = new Thread(counter, "Thread-2");  
            Thread t3 = new Thread(counter, "Thread-3");  
             t1.start();  
             t2.start();  
              t3.start();  
        }      
     }  
 
 
4) Explain about thread synchronization(inter-thread communication).?
 
 -Thread synchronization is the concurrent execution of two or more threads that share critical resources. Threads 
 should be synchronized to avoid critical resource use conflicts. Otherwise, conflicts may arise when parallel-running 
 threads attempt to modify a common variable at the same time.
 Inter-thread communication in Java is a mechanism in which a thread is paused running in its critical section and another 
 thread is allowed to enter (or lock) in the same critical section to be executed.Inter-thread communication is also known as
 Cooperation in Java.
 
 
 5)What is the difference between the sleep and wait method?
 
 -Sleep(): This Method is used to pause the execution of current thread for a specified time in Milliseconds. Here,
  Thread does not lose its ownership of the monitor and resume’s it’s execution.Sleep() method belongs to Thread class.
  Sleep() method does not release the lock on object during Synchronization.Sleep() is a static method. 
  
  
-Wait(): This method is defined in object class. It tells the calling thread (a.k.a Current Thread) to wait until another 
 thread invoke’s the notify() or notifyAll() method for this object, The thread waits until it reobtains the ownership of the
 monitor and Resume’s Execution.Wait() method belongs to Object class.Wait() method releases lock during Synchronization.
 Wait() is not a static method. 
 
