  Q4) Explain the difference between overloading and overriding methods with an example?
  
  Method Overloading is a Compile time polymorphism. In method overloading, more than one 
  method shares the same method name with a different signature in the class. In method 
  overloading, the return type can or can not be the same, but we have to change the parameter
  because, in java, we can not achieve the method overloading by changing only the return type
  of the method.
  
  e.g: 
  
   class Example{
 
    static int add(int a, int b)
    {
      return a + b;
    }
 
    static int add(int a, int b, int c)
    {
        return a + b + c;
    }
 
    public static void main(String args[])
    {
          System.out.println("add() with 2 parameters");
        System.out.println(add(4, 6));
       
          System.out.println("add() with 3 parameters");
        System.out.println(add(4, 6, 7));
    }
} 
  
  
  
  Method Overriding is a Run time polymorphism. In method overriding, the derived class provides
  the specific implementation of the method that is already provided by the base class or parent
  class. In method overriding, the return type must be the same or co-variant (return type may
  vary in the same direction as the derived class).
  
  e.g:
  
  class Animal {
 
    void eat()
    {
        System.out.println("eat() method of base class");
        System.out.println("eating.");
    }
}
 
class Dog extends Animal {
 
    void eat()
    {
        System.out.println("eat() method of derived class");
        System.out.println("Dog is eating.");
    }
}
 
class Main {
 
    public static void main(String args[])
    {
        Dog d1 = new Dog();
        Animal a1 = new Animal();
 
        d1.eat();
        a1.eat();
 
        Animal animal = new Dog();
        // eat() method of animal class is overridden by
        // base class eat()
        animal.eat();
    }
}
  